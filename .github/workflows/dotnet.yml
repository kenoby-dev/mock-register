name: .NET

on:
  push:
    branches:
    - develop
    
env:
  buildConfiguration: 'Release'
  buildRuntime: 'win-x64'
  runEnvironment: 'Pipeline'
  
jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    
    - name: Restore dependencies
      run: dotnet restore ${{ github.workspace }}\Source\Register.sln
      
    - name: Build
      run: dotnet build ${{ github.workspace }}\Source\Register.sln --configuration ${{ env.buildConfiguration }}
      
#     - name: Unit Tests
#       run: |
#         $vsTestConsoleExe = "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\Extensions\TestPlatform\vstest.console.exe"
#         $targetTestDll = "`"${{ github.workspace }}\Source\CDR.Register.API.Infrastructure.Tests.UnitTests\bin\Release\net5.0\CDR.Register.API.Infrastructure.Tests.UnitTests.dll`" `"${{ github.workspace }}\Source\CDR.Register.Domain.UnitTests\bin\Release\net5.0\CDR.Register.Domain.UnitTests.dll`" `"${{ github.workspace }}\Source\CDR.Register.IdentityServer.Tests.UnitTests\bin\Release\net5.0\CDR.Register.IdentityServer.Tests.UnitTests.dll`" `"${{ github.workspace }}\Source\CDR.Register.SSA.API.UnitTests\bin\Release\net5.0\CDR.Register.SSA.API.UnitTests.dll`""
#         #Note that the `" is an escape character to quote strings, and the `& is needed to start the command
#         $command = "`& `"$vsTestConsoleExe`" $targetTestDll"
#         Write-Host "$command"
#         Invoke-Expression $command
#       shell: powershell
      
    - name: Publish
      run: |
        dotnet publish ${{ github.workspace }}\Source\CDR.Register.API.Gateway.TLS --configuration ${{ env.buildConfiguration }} --runtime ${{ env.buildRuntime }} --no-restore --self-contained true 
        dotnet publish ${{ github.workspace }}\Source\CDR.Register.API.Gateway.mTLS --configuration ${{ env.buildConfiguration }} --runtime ${{ env.buildRuntime }} --no-restore --self-contained true 
        dotnet publish ${{ github.workspace }}\Source\CDR.Register.Admin.API --configuration ${{ env.buildConfiguration }} --runtime ${{ env.buildRuntime }} --no-restore --self-contained true 
        dotnet publish ${{ github.workspace }}\Source\CDR.Register.Discovery.API --configuration ${{ env.buildConfiguration }} --runtime ${{ env.buildRuntime }} --no-restore --self-contained true 
        dotnet publish ${{ github.workspace }}\Source\CDR.Register.IdentityServer --configuration ${{ env.buildConfiguration }} --runtime ${{ env.buildRuntime }} --no-restore --self-contained true
        dotnet publish ${{ github.workspace }}\Source\CDR.Register.SSA.API --configuration ${{ env.buildConfiguration }} --runtime ${{ env.buildRuntime }} --no-restore --self-contained true 
        dotnet publish ${{ github.workspace }}\Source\CDR.Register.Status.API --configuration ${{ env.buildConfiguration }} --runtime ${{ env.buildRuntime }} --no-restore --self-contained true 
      
    - name: Run projects
      run: |
        echo Hello world
        echo ${{ github.workspace }}
        
        cd ${{ github.workspace }}
        dir
        cd Source\CDR.Register.Admin.API\bin\Release\net5.0\win-x64
        cmd /c "start /b CDR.Register.Admin.API.exe --environment=Pipeline"
        cd ${{ github.workspace }}
        
        cd Source\CDR.Register.Status.API\bin\Release\net5.0\win-x64
        cmd /c "start /b CDR.Register.Status.API.exe --environment=Pipeline"
        cd ${{ github.workspace }}
        
        cd Source\CDR.Register.Discovery.API\bin\Release\net5.0\win-x64
        cmd /c "start /b CDR.Register.Discovery.API.exe --environment=Pipeline"
        cd ${{ github.workspace }}
        
        cd Source\CDR.Register.SSA.API\bin\Release\net5.0\win-x64
        cmd /c "start /b CDR.Register.SSA.API.exe --environment=Pipeline"
        cd ${{ github.workspace }}
        
        cd Source\CDR.Register.API.Gateway.mTLS\bin\Release\net5.0\win-x64
        cmd /c "start /b CDR.Register.API.Gateway.mTLS.exe --environment=Pipeline"
        cd ${{ github.workspace }}
        
        cd Source\CDR.Register.API.Gateway.TLS\bin\Release\net5.0\win-x64
        cmd /c "start /b CDR.Register.API.Gateway.TLS.exe --environment=Pipeline"
        cd ${{ github.workspace }}
        
        cd Source\CDR.Register.IdentityServer\bin\Release\net5.0\win-x64
        cmd /c "start /b CDR.Register.IdentityServer.exe --environment=Pipeline"
      shell: cmd
      
    - name: Install root certificate
      run: |
        # Write your PowerShell commands here.
        $PlainPassword = "#M0ckCDRCA#" 
        $SecurePassword = $PlainPassword | ConvertTo-SecureString -AsPlainText -Force
        Import-PfxCertificate -Password $SecurePassword -FilePath "CertificateManagement/mtls/ca.pfx" -CertStoreLocation Cert:\LocalMachine\Root
      shell: powershell
      
    - name: Integration Tests
      run: |
        $vsTestConsoleExe = "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\Extensions\TestPlatform\vstest.console.exe"
        $targetTestDll = "${{ github.workspace }}\Source\CDR.Register.IntegrationTests\bin\Release\net5.0\win-x64\CDR.Register.IntegrationTests.dll"
        $testRunSettings = "/Settings:`"${{ github.workspace }}\Source\CDR.Register.IntegrationTests\integration.runsettings`" "
        #Note that the `" is an escape character to quote strings, and the `& is needed to start the command
        $command = "`& `"$vsTestConsoleExe`" `"$targetTestDll`" $testRunSettings $parameters"
        Write-Host "$command"
        Invoke-Expression $command
      shell: powershell
