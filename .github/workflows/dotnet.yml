name: .NET

on:
  push:
    branches:
    - develop
    
env:
  buildConfiguration: 'Release'
  buildRuntime: 'win-x64'
  runEnvironment: 'Pipeline'
  
jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    
    - name: Restore dependencies
      run: dotnet restore ${{ github.workspace }}\Source\Register.sln
      
    - name: Build
      run: dotnet build ${{ github.workspace }}\Source\Register.sln --configuration ${{ env.buildConfiguration }}
      
#     - name: Unit Tests
#       run: |
#         $vsTestConsoleExe = "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\IDE\Extensions\TestPlatform\vstest.console.exe"
#         $targetTestDll = "`"${{ github.workspace }}\Source\CDR.Register.API.Infrastructure.Tests.UnitTests\bin\Release\net5.0\CDR.Register.API.Infrastructure.Tests.UnitTests.dll`" `"${{ github.workspace }}\Source\CDR.Register.Domain.UnitTests\bin\Release\net5.0\CDR.Register.Domain.UnitTests.dll`" `"${{ github.workspace }}\Source\CDR.Register.IdentityServer.Tests.UnitTests\bin\Release\net5.0\CDR.Register.IdentityServer.Tests.UnitTests.dll`" `"${{ github.workspace }}\Source\CDR.Register.SSA.API.UnitTests\bin\Release\net5.0\CDR.Register.SSA.API.UnitTests.dll`""
#         #Note that the `" is an escape character to quote strings, and the `& is needed to start the command
#         $command = "`& `"$vsTestConsoleExe`" $targetTestDll"
#         Write-Host "$command"
#         Invoke-Expression $command
#       shell: powershell
      
#    - name: Publish
#      run: |
#        dotnet publish ${{ github.workspace }}\Source\CDR.Register.API.Gateway.TLS --configuration ${{ env.buildConfiguration }} --runtime ${{ env.buildRuntime }} --no-restore --self-contained true 
#        dotnet publish ${{ github.workspace }}\Source\CDR.Register.API.Gateway.mTLS --configuration ${{ env.buildConfiguration }} --runtime ${{ env.buildRuntime }} --no-restore --self-contained true 
#        dotnet publish ${{ github.workspace }}\Source\CDR.Register.Admin.API --configuration ${{ env.buildConfiguration }} --runtime ${{ env.buildRuntime }} --no-restore --self-contained true 
#        dotnet publish ${{ github.workspace }}\Source\CDR.Register.Discovery.API --configuration ${{ env.buildConfiguration }} --runtime ${{ env.buildRuntime }} --no-restore --self-contained true 
#        dotnet publish ${{ github.workspace }}\Source\CDR.Register.IdentityServer --configuration ${{ env.buildConfiguration }} --runtime ${{ env.buildRuntime }} --no-restore --self-contained true
#        dotnet publish ${{ github.workspace }}\Source\CDR.Register.SSA.API --configuration ${{ env.buildConfiguration }} --runtime ${{ env.buildRuntime }} --no-restore --self-contained true 
#        dotnet publish ${{ github.workspace }}\Source\CDR.Register.Status.API --configuration ${{ env.buildConfiguration }} --runtime ${{ env.buildRuntime }} --no-restore --self-contained true 
      
    - name: Install root certificate
      run: |
        # Write your PowerShell commands here.
        $PlainPassword = "#M0ckCDRCA#" 
        $SecurePassword = $PlainPassword | ConvertTo-SecureString -AsPlainText -Force
        Import-PfxCertificate -Password $SecurePassword -FilePath "CertificateManagement/mtls/ca.pfx" -CertStoreLocation Cert:\LocalMachine\Root
      shell: powershell
      
    - name: Integration Tests
      run: |
        echo ${{ github.workspace }}
        
        Write-Host "Creating the temporary CDR directory which holds the logs and database file..."
        New-Item -ItemType Directory -Path d:\a\mock-register\mock-register\cdr -Force
        
        Write-Host "Running the solutions..."
        cd ${{ github.workspace }}\Source\CDR.Register.API.Gateway.TLS
        Start-Process dotnet -ArgumentList "run -v m -c ${{ env.buildConfiguration }} --launch-profile CDR.Register.API.Gateway.TLS.Pipeline"
        
        cd ${{ github.workspace }}\Source\CDR.Register.API.Gateway.mTLS
        Start-Process dotnet -ArgumentList "run -v m -c ${{ env.buildConfiguration }} --launch-profile CDR.Register.API.Gateway.mTLS.Pipeline"
        
        cd ${{ github.workspace }}\Source\CDR.Register.Admin.API
        Start-Process dotnet -ArgumentList "run -v m -c ${{ env.buildConfiguration }} --launch-profile CDR.Register.Admin.API.Pipeline"
        
        cd ${{ github.workspace }}\Source\CDR.Register.Discovery.API
        Start-Process dotnet -ArgumentList "run -v m -c ${{ env.buildConfiguration }} --launch-profile CDR.Register.Discovery.API.Pipeline"
        
        cd ${{ github.workspace }}\Source\CDR.Register.SSA.API
        Start-Process dotnet -ArgumentList "run -v m -c ${{ env.buildConfiguration }} --launch-profile CDR.Register.SSA.API.Pipeline"
        
        cd ${{ github.workspace }}\Source\CDR.Register.Status.API
        Start-Process dotnet -ArgumentList "run -v m -c ${{ env.buildConfiguration }} --launch-profile CDR.Register.Status.API.Pipeline"
        
        cd ${{ github.workspace }}\Source\CDR.Register.IdentityServer
        Start-Process dotnet -ArgumentList "run -v m -c ${{ env.buildConfiguration }} --launch-profile CDR.Register.IdentityServer.Pipeline"
        
        cd ${{ github.workspace }}
        
        Write-Host "Sleeping for 30 seconds..."
        Start-Sleep -s 30
        
        Write-Host "Listing contents of d:\a\mock-register\mock-register\cdr directory..."
        cd d:\a\mock-register\mock-register\cdr
        dir
        
        #$log = Get-Content "d:\\a\\mock-register\\mock-register\\cdr\\Logs\\cdr-mr-admin-api.log" -Raw
        #Write-Host $log
        
        Write-Host "Basic connectivity testing..."
        [System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $True }
        
        try
        {
          Write-Host "Testing https://localhost:7000/idp/.well-known/openid-configuration..."
          $apiReq = [System.Net.HttpWebRequest]::CreateHttp("https://localhost:7000/idp/.well-known/openid-configuration")
          $apiRes = $apiReq.GetResponse()
          Write-Host $apiRes.StatusCode
        }
        catch
        {
          Write-Host "Web request failed"
          $log = Get-Content "d:\\a\\mock-register\\mock-register\\cdr\\Logs\\cdr-mr-tls-gateway.log" -Raw
          Write-Host $log
          
          $log = Get-Content "d:\\a\\mock-register\\mock-register\\cdr\\Logs\\cdr-mr-identityserver.log" -Raw
          Write-Host $log
        }
        
        try
        {
          Write-Host "Testing https://localhost:7000/cdr-register/v1/banking/data-recipients..."
          $apiReq = [System.Net.HttpWebRequest]::CreateHttp("https://localhost:7000/cdr-register/v1/banking/data-recipients")
          $apiRes = $apiReq.GetResponse()
          Write-Host $apiRes.StatusCode
        }
        catch
        {
          Write-Host "Web request failed"
          $log = Get-Content "d:\\a\\mock-register\\mock-register\\cdr\\Logs\\cdr-mr-tls-gateway.log"
          Write-Host $log
        }
        
        Write-Host "Running the integration tests..."
        cd ${{ github.workspace }}\Source\CDR.Register.IntegrationTests
        dotnet build -c "Release"
        dotnet test ${{ github.workspace }}\Source\CDR.Register.IntegrationTests\bin\Release\net5.0\CDR.Register.IntegrationTests.dll --settings ${{ github.workspace }}\Source\CDR.Register.IntegrationTests\integration.pipeline.runsettings

      shell: powershell
